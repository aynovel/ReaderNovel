package com.bytedance.club.entry.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.bytedance.club.entry.ChapterItemBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_ITEM_BEAN".
*/
public class ChapterItemBeanDao extends AbstractDao<ChapterItemBean, String> {

    public static final String TABLENAME = "CHAPTER_ITEM_BEAN";

    /**
     * Properties of entity ChapterItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookID = new Property(0, String.class, "bookID", false, "BOOK_ID");
        public final static Property ChapterId = new Property(1, String.class, "chapterId", true, "CHAPTER_ID");
        public final static Property ChapterName = new Property(2, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property Isvip = new Property(3, Boolean.class, "isvip", false, "ISVIP");
        public final static Property Sort = new Property(4, int.class, "sort", false, "SORT");
    }


    public ChapterItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_ITEM_BEAN\" (" + //
                "\"BOOK_ID\" TEXT," + // 0: bookID
                "\"CHAPTER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: chapterId
                "\"CHAPTER_NAME\" TEXT," + // 2: chapterName
                "\"ISVIP\" INTEGER," + // 3: isvip
                "\"SORT\" INTEGER NOT NULL );"); // 4: sort
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAPTER_ITEM_BEAN_BOOK_ID ON \"CHAPTER_ITEM_BEAN\"" +
                " (\"BOOK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterItemBean entity) {
        stmt.clearBindings();
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(1, bookID);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        Boolean isvip = entity.getIsvip();
        if (isvip != null) {
            stmt.bindLong(4, isvip ? 1L: 0L);
        }
        stmt.bindLong(5, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterItemBean entity) {
        stmt.clearBindings();
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(1, bookID);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        Boolean isvip = entity.getIsvip();
        if (isvip != null) {
            stmt.bindLong(4, isvip ? 1L: 0L);
        }
        stmt.bindLong(5, entity.getSort());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ChapterItemBean readEntity(Cursor cursor, int offset) {
        ChapterItemBean entity = new ChapterItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isvip
            cursor.getInt(offset + 4) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterItemBean entity, int offset) {
        entity.setBookID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsvip(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSort(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChapterItemBean entity, long rowId) {
        return entity.getChapterId();
    }
    
    @Override
    public String getKey(ChapterItemBean entity) {
        if(entity != null) {
            return entity.getChapterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChapterItemBean entity) {
        return entity.getChapterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
