package com.bytedance.club.amodel.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTO_PAY_BOOK_BEAN".
*/
public class AutoPayBookBeanDao extends AbstractDao<AutoPayBookBean, String> {

    public static final String TABLENAME = "AUTO_PAY_BOOK_BEAN";

    /**
     * Properties of entity AutoPayBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Wid = new Property(0, String.class, "wid", true, "WID");
        public final static Property IsAutoPay = new Property(1, boolean.class, "isAutoPay", false, "IS_AUTO_PAY");
        public final static Property AddTime = new Property(2, int.class, "addTime", false, "ADD_TIME");
    }


    public AutoPayBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AutoPayBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTO_PAY_BOOK_BEAN\" (" + //
                "\"WID\" TEXT PRIMARY KEY NOT NULL ," + // 0: wid
                "\"IS_AUTO_PAY\" INTEGER NOT NULL ," + // 1: isAutoPay
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 2: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTO_PAY_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AutoPayBookBean entity) {
        stmt.clearBindings();
 
        String wid = entity.getWid();
        if (wid != null) {
            stmt.bindString(1, wid);
        }
        stmt.bindLong(2, entity.getIsAutoPay() ? 1L: 0L);
        stmt.bindLong(3, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AutoPayBookBean entity) {
        stmt.clearBindings();
 
        String wid = entity.getWid();
        if (wid != null) {
            stmt.bindString(1, wid);
        }
        stmt.bindLong(2, entity.getIsAutoPay() ? 1L: 0L);
        stmt.bindLong(3, entity.getAddTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AutoPayBookBean readEntity(Cursor cursor, int offset) {
        AutoPayBookBean entity = new AutoPayBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // wid
            cursor.getShort(offset + 1) != 0, // isAutoPay
            cursor.getInt(offset + 2) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AutoPayBookBean entity, int offset) {
        entity.setWid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsAutoPay(cursor.getShort(offset + 1) != 0);
        entity.setAddTime(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AutoPayBookBean entity, long rowId) {
        return entity.getWid();
    }
    
    @Override
    public String getKey(AutoPayBookBean entity) {
        if(entity != null) {
            return entity.getWid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AutoPayBookBean entity) {
        return entity.getWid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
